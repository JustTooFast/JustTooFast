// Copyright 2023 Matthew Yancer
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.IO;
using System.Text;

namespace JustTooFast.BidFast;

/// <summary>
/// Writes generated Builder, Info, and Declaration classes.
/// </summary>
public class BidWriter : IBidWriter
{
    private readonly IFileHelper m_FileHelper;
    private readonly IBidParser m_BidParser;

    public BidWriter(IFileHelper fileHelper, IBidParser bidParser)
    {
        m_FileHelper = fileHelper ?? throw new ArgumentNullException(nameof(fileHelper));
        m_BidParser = bidParser ?? throw new ArgumentNullException(nameof(bidParser));
    }

    /// <summary>
    /// Converts "bid" domain specific language (DSL) input files into
    /// generated builder, info, and declaration classes and writes
    /// them to an output folder.
    /// </summary>
    /// <param name="inputFolder">The folder holding "bid" DSL files to be parsed.</param>
    /// <param name="outputFolder">The folder where generated classes are written.</param>
    /// <returns>The number of written files.</returns>
    public int Write(string inputFolder, string outputFolder, string targetNamespace)
    {
        if(string.IsNullOrWhiteSpace(inputFolder))
            throw new ArgumentNullException(nameof(inputFolder));
        if(string.IsNullOrWhiteSpace(outputFolder))
            throw new ArgumentNullException(nameof(outputFolder));
        if(string.IsNullOrWhiteSpace(targetNamespace))
            throw new ArgumentNullException(nameof(targetNamespace));
            
        string[] filePaths = m_FileHelper.GetFilesInFolder(inputFolder);

        int result = 0;
        foreach (string filePath in filePaths)
        {
            File inputFile = m_FileHelper.Read(filePath);
            BidEntity entity = m_BidParser.Parse(inputFile);

            IGenerator infoGen = new InfoGenerator(entity, targetNamespace);
            string infoFileContents = infoGen.Generate();

            IGenerator builderGen = new BuilderGenerator(entity, targetNamespace);
            string builderFileContents = builderGen.Generate();

            IGenerator declarationGen = new DeclarationGenerator(entity, targetNamespace);
            string declarationFileContents = declarationGen.Generate();

            string outputFilePrefix = $"{outputFolder}{Path.DirectorySeparatorChar}{entity.Name}";

            string header = GetHeader();
            m_FileHelper.Write($"{outputFilePrefix}Info.gen.cs", $"{header}{infoFileContents}");
            result++;

            m_FileHelper.Write($"{outputFilePrefix}Builder.gen.cs", $"{header}{builderFileContents}");
            result++;

            m_FileHelper.Write($"{outputFilePrefix}Declaration.gen.cs", $"{header}{declarationFileContents}");
            result++;
        }

        return result;
    }

    private string GetHeader()
    {
        StringBuilder header = new StringBuilder()
            .AppendLineFeed("//------------------------------------------------------------------------------")
            .AppendLineFeed("// <auto-generated>")
            .AppendLineFeed("//     This code was generated by a tool.")
            .AppendLineFeed("//")
            .AppendLineFeed("//     Changes to this file may cause incorrect behavior and will be lost if")
            .AppendLineFeed("//     the code is regenerated.")
            .AppendLineFeed("// </auto-generated>")
            .AppendLineFeed("//------------------------------------------------------------------------------")
            .AppendLineFeed();

        return header.ToString();
    }
}
